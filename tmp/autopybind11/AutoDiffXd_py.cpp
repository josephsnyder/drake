#include "drake/math/autodiff.h"
#include "external/eigen/include/_usr_include_eigen3/Eigen/src/Core/Matrix.h"
#include <pybind11/eigen.h>
#include <pybind11/iostream.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <sstream>

namespace py = pybind11;
void apb11_pydrake_AutoDiffXd_py_register(py::module &m) {
  static bool called = false;
  if (called) {
    return;
  }
  called = true;
  py::class_<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>>
      AutoDiffXd(m, "AutoDiffXd");

  AutoDiffXd.def(py::init<>())
    .def(py::init<Eigen::Ref<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const &, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> &,int,int>(),py::arg("value"),py::arg("nbDer"),py::arg("derNumber"))
    .def(py::init<Eigen::Ref<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Real const &, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> &>(),py::arg("value"))
    .def(py::init<Eigen::Ref<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const &, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> &,Eigen::Ref<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::DerType const &, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> &>(),py::arg("value"),py::arg("der"))
    .def(py::init<Eigen::Ref<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const &, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> &,::Eigen::internal::enable_if<true, void *>::type>(),py::arg("other"),py::arg("arg1") = (::Eigen::internal::enable_if<true, void *>::type)0)
    .def(py::init<Eigen::Ref<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const &, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> &>(),py::arg("other"))
    .def("derivatives", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::DerType const & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )(  )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::derivatives), py::return_value_policy::reference_internal)
    .def("derivatives", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::DerType & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )(  )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::derivatives), py::return_value_policy::reference_internal)
    .def("value", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )(  )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::value), py::return_value_policy::reference_internal)
    .def("value", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )(  )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::value), py::return_value_policy::reference_internal)
    
    .def("__neq__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & b){ return a!=b; })
    .def("__neq__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator!=), py::arg("b"))
    .def("__neq__", +[](::Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>::Scalar const & s,::Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>> const & d){ return s!=d; })
    .def("__neq__", +[](::Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s!=d; })
    .def("__neq__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s!=d; })
    .def("__neq__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator!=), py::arg("other"))
    .def("__neq__", +[](::Eigen::ArrayBase<Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>::Scalar const & s,::Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1> const & d){ return s!=d; })
    .def("__neq__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>> const & d){ return s!=d; })
    .def("__mul__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & b){ return a*b; })
    .def("__mul__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> b){ return a*b; })
    .def("__imul__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator*=), py::arg("other"))
    .def("__imul__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator*=), py::arg("other"))
    .def("__add__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> b){ return a+b; })
    .def("__add__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & b){ return a+b; })
    .def("__iadd__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator+=), py::arg("other"))
    .def("__iadd__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator+=), py::arg("other"))
    .def("__sub__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> a){ return a; })
    .def("__sub__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> b){ return a-b; })
    .def("__sub__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & b){ return a-b; })
    .def("__isub__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator-=), py::arg("other"))
    .def("__isub__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator-=), py::arg("other"))
    .def("__truediv__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & b){ return a/b; })
    .def("__truediv__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> b){ return a/b; })
    .def("__itruediv__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator/=), py::arg("other"))
    .def("__itruediv__", static_cast<::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> & ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator/=), py::arg("other"))
    .def("__lt__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>> const & d){ return s<d; })
    .def("__lt__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator<), py::arg("b"))
    .def("__lt__", +[](::Eigen::ArrayBase<Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>::Scalar const & s,::Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1> const & d){ return s<d; })
    .def("__lt__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s<d; })
    .def("__lt__", +[](::Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s<d; })
    .def("__lt__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator<), py::arg("other"))
    .def("__lt__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & b){ return a<b; })
    .def("__lt__", +[](::Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>::Scalar const & s,::Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>> const & d){ return s<d; })
    .def("__str__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & a) {
        std::ostringstream oss;
        oss << a;
        std::string s(oss.str());

        return s;})    .def("__le__", +[](::Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>::Scalar const & s,::Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>> const & d){ return s<=d; })
    .def("__le__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator<=), py::arg("other"))
    .def("__le__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & b){ return a<=b; })
    .def("__le__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>> const & d){ return s<=d; })
    .def("__le__", +[](::Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s<=d; })
    .def("__le__", +[](::Eigen::ArrayBase<Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>::Scalar const & s,::Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1> const & d){ return s<=d; })
    .def("__le__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s<=d; })
                .def("__eq__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator==), py::arg("b"))
    .def("__eq__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & b){ return a==b; })
    .def("__eq__", +[](::Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s==d; })
    .def("__eq__", +[](::Eigen::ArrayBase<Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>::Scalar const & s,::Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1> const & d){ return s==d; })
    .def("__eq__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator==), py::arg("other"))
    .def("__eq__", +[](::Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>::Scalar const & s,::Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>> const & d){ return s==d; })
    .def("__eq__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s==d; })
    .def("__eq__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>> const & d){ return s==d; })
    .def("__gt__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator>), py::arg("b"))
    .def("__gt__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator>), py::arg("other"))
    .def("__gt__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & b){ return a>b; })
    .def("__gt__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s>d; })
    .def("__gt__", +[](::Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>::Scalar const & s,::Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>> const & d){ return s>d; })
    .def("__gt__", +[](::Eigen::ArrayBase<Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>::Scalar const & s,::Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1> const & d){ return s>d; })
    .def("__gt__", +[](::Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s>d; })
    .def("__gt__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>> const & d){ return s>d; })
    .def("__ge__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator>=), py::arg("b"))
    .def("__ge__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 3, 0, 3, 3>>> const & d){ return s>=d; })
    .def("__ge__", static_cast<bool ( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::* )( ::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & )const>(&::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::operator>=), py::arg("other"))
    .def("__ge__", +[](::Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s>=d; })
    .def("__ge__", +[](::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>>::Scalar const & a,::Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1>> const & b){ return a>=b; })
    .def("__ge__", +[](::Eigen::ArrayBase<Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>::Scalar const & s,::Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1> const & d){ return s>=d; })
    .def("__ge__", +[](::Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>>::Scalar const & s,::Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Eigen::AutoDiffScalar<Eigen::VectorXd>, Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>, const Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>> const & d){ return s>=d; })
    .def("__ge__", +[](::Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>>>::Scalar const & s,::Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::VectorXd>>, const Eigen::Array<Eigen::AutoDiffScalar<Eigen::VectorXd>, 3, 1, 0, 3, 1>> const & d){ return s>=d; })
    ;
}
